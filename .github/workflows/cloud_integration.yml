name: Cloud integration
on:
  push:
    paths-ignore:
    - '*.md'
    - '**/*.md'
    branches:
    - main
env:
  GH_ANNOTATION: true
  DOCKER_BUILDKIT: 1
jobs:
  docker_build:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        target: [proxy, controller, web, cni-plugin, debug, cli-bin, grafana]
    name: Docker build (${{ matrix.target }})
    steps:
    - name: Checkout code
      # actions/checkout@v2
      uses: actions/checkout@722adc6
    - name: Set environment variables from scripts
      run: |
        . bin/_tag.sh
        echo ::set-env name=TAG::$(CI_FORCE_CLEAN=1 bin/root-tag)

        . bin/_docker.sh
        echo ::set-env name=DOCKER_REGISTRY::$DOCKER_REGISTRY
        echo ::set-env name=DOCKER_BUILDKIT_CACHE::${{ runner.temp }}/.buildx-cache
    - name: Cache docker layers
      # actions/cache@v2.0.0
      uses: actions/cache@b820478
      with:
        path: ${{ env.DOCKER_BUILDKIT_CACHE }}
        key: ${{ runner.os }}-buildx-${{ matrix.target }}-${{ env.TAG }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ matrix.target }}-
    - name: Build docker images
      env:
        DOCKER_TRACE: 1
      run: |
        docker buildx create --driver docker-container --use
        bin/docker-build-${{ matrix.target }}
    - name: Configure gcloud
      # linkerd/linkerd2-action-gcloud@v1.0.1
      uses: linkerd/linkerd2-action-gcloud@308c4df
      with:
        cloud_sdk_service_account_key: ${{ secrets.CLOUD_SDK_SERVICE_ACCOUNT_KEY }}
        gcp_project: ${{ secrets.GCP_PROJECT }}
        gcp_zone: ${{ secrets.GCP_ZONE }}
    - name: Push docker images to registry
      run: |
        . bin/_docker.sh
        docker_push "${{ matrix.target }}" "$TAG"
        docker_retag "${{ matrix.target }}" "$TAG" main
        docker_push "${{ matrix.target }}" main
    - name: Prune docker layers cache
      # changes generate new images while the existing ones don't get removed
      # so we manually do that to avoid bloating the cache
      run: bin/docker-cache-prune
  # todo: Keep in sync with `release.yml`
  cloud_integration_tests:
    name: Cloud integration tests
    runs-on: ubuntu-18.04
    needs: [docker_build]
    steps:
    - name: Checkout code
      # actions/checkout@v2
      uses: actions/checkout@722adc6
    - name: Try to load cached Go modules
      # actions/cache@v1.1.2
      uses: actions/cache@70655ec
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Install linkerd CLI
      run: |
        TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
        CMD="$PWD/target/release/linkerd2-cli-$TAG-linux-amd64"
        bin/docker-pull-binaries $TAG
        $CMD version --client
        # validate CLI version matches the repo
        [[ "$TAG" == "$($CMD version --short --client)" ]]
        echo "Installed Linkerd CLI version: $TAG"
        echo "::set-env name=CMD::$CMD"
        echo "::set-env name=TAG::$TAG"
    - name: Create GKE cluster
      # linkerd/linkerd2-action-gcloud@v1.0.1
      uses: linkerd/linkerd2-action-gcloud@308c4df
      with:
        cloud_sdk_service_account_key: ${{ secrets.CLOUD_SDK_SERVICE_ACCOUNT_KEY }}
        gcp_project: ${{ secrets.GCP_PROJECT }}
        gcp_zone: ${{ secrets.GCP_ZONE }}
        preemptible: false
        create: true
        name: testing-${{ env.TAG }}-${{ github.run_id }}
        num_nodes: 2
    - name: Run integration tests
      run: bin/tests --skip-kind-create "$CMD"
    - name: CNI tests
      run: |
        export TAG="$($CMD version --client --short)"
        go test -cover -race -v -mod=readonly ./cni-plugin/test -integration-tests
